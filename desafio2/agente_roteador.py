from agente_semantico import responder_semantico
from agente_analitico import responder_analitico
from langchain.chat_models import ChatOpenAI
from langchain.schema import HumanMessage
import re

def heuristica_classificacao(pergunta: str) -> str:
    """Fallback simples baseado em palavras-chave."""
    pergunta_lower = pergunta.lower()
    padroes_analiticos = [
        r"m√©dia", r"soma", r"total", r"quantidade", r"valor (?:m√©dio|total)?",
        r"maior.*valor", r"menor.*valor", r"contagem", r"n√∫mero de", r"quanto"
    ]
    for padrao in padroes_analiticos:
        if re.search(padrao, pergunta_lower):
            return "analitica"
    return "semantica"

def agente_roteador(pergunta: str, df, persist_dir: str, openai_api_key: str) -> str:
    try:
        # LLM para classificar a inten√ß√£o
        llm = ChatOpenAI(api_key=openai_api_key, temperature=0)
        prompt = f"""
Classifique a seguinte pergunta do usu√°rio como um dos tr√™s tipos:
- "analitica" se envolve c√°lculo, soma, m√©dia, quantidade ou agrega√ß√£o sobre valores num√©ricos.
- "semantica" se √© uma pergunta textual ou descritiva que depende de similaridade de texto.
- "fora_do_escopo" se n√£o puder ser respondida com os dados de notas fiscais.

Pergunta: {pergunta}

Somente retorne uma dessas tr√™s palavras: analitica, semantica ou fora_do_escopo.
"""

        resposta = llm([HumanMessage(content=prompt)]).content.strip().lower()
        print(f"üß† Classifica√ß√£o LLM: {resposta}")

    except Exception as e:
        print("‚ö†Ô∏è Falha na LLM, usando heur√≠stica:", e)
        resposta = heuristica_classificacao(pergunta)
        print(f"üß† Classifica√ß√£o heur√≠stica: {resposta}")

    # Decis√£o final
    if resposta == "analitica":
        return responder_analitico(pergunta, df, openai_api_key)

    elif resposta == "semantica":
        return responder_semantico(pergunta, persist_dir, openai_api_key)
    else:
        return "ü§î Desculpe, essa pergunta est√° fora do escopo do sistema."
